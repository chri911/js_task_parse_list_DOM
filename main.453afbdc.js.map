{"version":3,"sources":["scripts/main.js"],"names":["employees","document","querySelector","stringToNumber","string","Number","match","join","sortList","list","employee","sortedEmployees","children","sort","employee1","employee2","dataset","salary","append","getEmployees","map","person","name","innerText"],"mappings":";AAAA,aA+BA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA7BA,IAAMA,EAAYC,SAASC,cAAc,MAEnCC,EAAiB,SAACC,GACfC,OAAAA,OAAOD,EAAOE,MAAM,OAAOC,KAAK,MAGnCC,EAAW,SAACC,GACVC,IAEAC,EAAkB,EAFPF,EAAKG,UAEgBC,KAAK,SAACC,EAAWC,GACrDZ,OAAAA,EAAeY,EAAUC,QAAQC,QAC/Bd,EAAeW,EAAUE,QAAQC,UAK9BN,OAFPF,EAAKS,OAALT,MAAAA,EAAeE,EAAAA,IAERA,GAGHQ,EAAe,SAACV,GAGb,OAAA,EAFUA,EAAKG,UAEDQ,IAAI,SAAAC,GAAM,OAAA,EAAA,CAC7BC,KAAMD,EAAOE,WACVF,EAAOL,YAIdR,EAASR,GACTmB,EAAanB","file":"main.453afbdc.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst employees = document.querySelector('ul');\n\nconst stringToNumber = (string) => {\n  return Number(string.match(/\\d/g).join(''));\n};\n\nconst sortList = (list) => {\n  const employee = list.children;\n\n  const sortedEmployees = [...employee].sort((employee1, employee2) => (\n    stringToNumber(employee2.dataset.salary)\n    - stringToNumber(employee1.dataset.salary)\n  ));\n\n  list.append(...sortedEmployees);\n\n  return sortedEmployees;\n};\n\nconst getEmployees = (list) => {\n  const employee = list.children;\n\n  return [...employee].map(person => ({\n    name: person.innerText,\n    ...person.dataset,\n  }));\n};\n\nsortList(employees);\ngetEmployees(employees);\n"]}